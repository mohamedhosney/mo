
SPI2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000780  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000084c  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000042e  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9e 03 	call	0x73c	; 0x73c <main>
  64:	0c 94 be 03 	jmp	0x77c	; 0x77c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_SetPinDirection>:
#include "Std_Types.h"
#include "Dio_Int.h"
#include "Dio_Reg.h"
#include "Utilities.h"
void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	29 97       	sbiw	r28, 0x09	; 9
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) & (PinNo<=PIN7))
  86:	19 86       	std	Y+9, r1	; 0x09
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	84 30       	cpi	r24, 0x04	; 4
  8c:	10 f4       	brcc	.+4      	; 0x92 <Dio_SetPinDirection+0x26>
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	29 87       	std	Y+9, r18	; 0x09
  92:	18 86       	std	Y+8, r1	; 0x08
  94:	8a 81       	ldd	r24, Y+2	; 0x02
  96:	88 30       	cpi	r24, 0x08	; 8
  98:	10 f4       	brcc	.+4      	; 0x9e <Dio_SetPinDirection+0x32>
  9a:	31 e0       	ldi	r19, 0x01	; 1
  9c:	38 87       	std	Y+8, r19	; 0x08
  9e:	89 85       	ldd	r24, Y+9	; 0x09
  a0:	98 85       	ldd	r25, Y+8	; 0x08
  a2:	89 23       	and	r24, r25
  a4:	88 23       	and	r24, r24
  a6:	09 f4       	brne	.+2      	; 0xaa <Dio_SetPinDirection+0x3e>
  a8:	ea c0       	rjmp	.+468    	; 0x27e <Dio_SetPinDirection+0x212>
	{
		if(Direction==OUTPUT)
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	09 f0       	breq	.+2      	; 0xb2 <Dio_SetPinDirection+0x46>
  b0:	6f c0       	rjmp	.+222    	; 0x190 <Dio_SetPinDirection+0x124>
		{
			switch(GroupNo)
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	28 2f       	mov	r18, r24
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	3f 83       	std	Y+7, r19	; 0x07
  ba:	2e 83       	std	Y+6, r18	; 0x06
  bc:	8e 81       	ldd	r24, Y+6	; 0x06
  be:	9f 81       	ldd	r25, Y+7	; 0x07
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	91 05       	cpc	r25, r1
  c4:	49 f1       	breq	.+82     	; 0x118 <Dio_SetPinDirection+0xac>
  c6:	2e 81       	ldd	r18, Y+6	; 0x06
  c8:	3f 81       	ldd	r19, Y+7	; 0x07
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	31 05       	cpc	r19, r1
  ce:	2c f4       	brge	.+10     	; 0xda <Dio_SetPinDirection+0x6e>
  d0:	8e 81       	ldd	r24, Y+6	; 0x06
  d2:	9f 81       	ldd	r25, Y+7	; 0x07
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	61 f0       	breq	.+24     	; 0xf0 <Dio_SetPinDirection+0x84>
  d8:	d2 c0       	rjmp	.+420    	; 0x27e <Dio_SetPinDirection+0x212>
  da:	2e 81       	ldd	r18, Y+6	; 0x06
  dc:	3f 81       	ldd	r19, Y+7	; 0x07
  de:	22 30       	cpi	r18, 0x02	; 2
  e0:	31 05       	cpc	r19, r1
  e2:	71 f1       	breq	.+92     	; 0x140 <Dio_SetPinDirection+0xd4>
  e4:	8e 81       	ldd	r24, Y+6	; 0x06
  e6:	9f 81       	ldd	r25, Y+7	; 0x07
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	91 05       	cpc	r25, r1
  ec:	e9 f1       	breq	.+122    	; 0x168 <Dio_SetPinDirection+0xfc>
  ee:	c7 c0       	rjmp	.+398    	; 0x27e <Dio_SetPinDirection+0x212>
			{
			case GroupA: SET_BIT(DDRA, PinNo); break;
  f0:	aa e3       	ldi	r26, 0x3A	; 58
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ea e3       	ldi	r30, 0x3A	; 58
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	48 2f       	mov	r20, r24
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 2e       	mov	r0, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <Dio_SetPinDirection+0xa2>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <Dio_SetPinDirection+0x9e>
 112:	84 2b       	or	r24, r20
 114:	8c 93       	st	X, r24
 116:	b3 c0       	rjmp	.+358    	; 0x27e <Dio_SetPinDirection+0x212>
			case GroupB: SET_BIT(DDRB, PinNo); break;
 118:	a7 e3       	ldi	r26, 0x37	; 55
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e7 e3       	ldi	r30, 0x37	; 55
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 2e       	mov	r0, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_SetPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_SetPinDirection+0xc6>
 13a:	84 2b       	or	r24, r20
 13c:	8c 93       	st	X, r24
 13e:	9f c0       	rjmp	.+318    	; 0x27e <Dio_SetPinDirection+0x212>
			case GroupC: SET_BIT(DDRC, PinNo); break;
 140:	a4 e3       	ldi	r26, 0x34	; 52
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e4 e3       	ldi	r30, 0x34	; 52
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <Dio_SetPinDirection+0xf2>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <Dio_SetPinDirection+0xee>
 162:	84 2b       	or	r24, r20
 164:	8c 93       	st	X, r24
 166:	8b c0       	rjmp	.+278    	; 0x27e <Dio_SetPinDirection+0x212>
			case GroupD: SET_BIT(DDRD, PinNo); break;
 168:	a1 e3       	ldi	r26, 0x31	; 49
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e1 e3       	ldi	r30, 0x31	; 49
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 2e       	mov	r0, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <Dio_SetPinDirection+0x11a>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <Dio_SetPinDirection+0x116>
 18a:	84 2b       	or	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	77 c0       	rjmp	.+238    	; 0x27e <Dio_SetPinDirection+0x212>
			}
		}
		else if(Direction==INPUT)
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	88 23       	and	r24, r24
 194:	09 f0       	breq	.+2      	; 0x198 <Dio_SetPinDirection+0x12c>
 196:	73 c0       	rjmp	.+230    	; 0x27e <Dio_SetPinDirection+0x212>
		{
			switch(GroupNo)
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	3d 83       	std	Y+5, r19	; 0x05
 1a0:	2c 83       	std	Y+4, r18	; 0x04
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	9d 81       	ldd	r25, Y+5	; 0x05
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 05       	cpc	r25, r1
 1aa:	59 f1       	breq	.+86     	; 0x202 <Dio_SetPinDirection+0x196>
 1ac:	2c 81       	ldd	r18, Y+4	; 0x04
 1ae:	3d 81       	ldd	r19, Y+5	; 0x05
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	2c f4       	brge	.+10     	; 0x1c0 <Dio_SetPinDirection+0x154>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	69 f0       	breq	.+26     	; 0x1d8 <Dio_SetPinDirection+0x16c>
 1be:	5f c0       	rjmp	.+190    	; 0x27e <Dio_SetPinDirection+0x212>
 1c0:	2c 81       	ldd	r18, Y+4	; 0x04
 1c2:	3d 81       	ldd	r19, Y+5	; 0x05
 1c4:	22 30       	cpi	r18, 0x02	; 2
 1c6:	31 05       	cpc	r19, r1
 1c8:	89 f1       	breq	.+98     	; 0x22c <Dio_SetPinDirection+0x1c0>
 1ca:	8c 81       	ldd	r24, Y+4	; 0x04
 1cc:	9d 81       	ldd	r25, Y+5	; 0x05
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	91 05       	cpc	r25, r1
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <Dio_SetPinDirection+0x16a>
 1d4:	40 c0       	rjmp	.+128    	; 0x256 <Dio_SetPinDirection+0x1ea>
 1d6:	53 c0       	rjmp	.+166    	; 0x27e <Dio_SetPinDirection+0x212>
			{
			case GroupA: CLR_BIT(DDRA, PinNo); break;
 1d8:	aa e3       	ldi	r26, 0x3A	; 58
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	ea e3       	ldi	r30, 0x3A	; 58
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	48 2f       	mov	r20, r24
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 2e       	mov	r0, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <Dio_SetPinDirection+0x18a>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <Dio_SetPinDirection+0x186>
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	8c 93       	st	X, r24
 200:	3e c0       	rjmp	.+124    	; 0x27e <Dio_SetPinDirection+0x212>
			case GroupB: CLR_BIT(DDRB, PinNo); break;
 202:	a7 e3       	ldi	r26, 0x37	; 55
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e7 e3       	ldi	r30, 0x37	; 55
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 2e       	mov	r0, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <Dio_SetPinDirection+0x1b4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <Dio_SetPinDirection+0x1b0>
 224:	80 95       	com	r24
 226:	84 23       	and	r24, r20
 228:	8c 93       	st	X, r24
 22a:	29 c0       	rjmp	.+82     	; 0x27e <Dio_SetPinDirection+0x212>
			case GroupC: CLR_BIT(DDRC, PinNo); break;
 22c:	a4 e3       	ldi	r26, 0x34	; 52
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e4 e3       	ldi	r30, 0x34	; 52
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <Dio_SetPinDirection+0x1de>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <Dio_SetPinDirection+0x1da>
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	8c 93       	st	X, r24
 254:	14 c0       	rjmp	.+40     	; 0x27e <Dio_SetPinDirection+0x212>
			case GroupD: CLR_BIT(DDRD, PinNo); break;
 256:	a1 e3       	ldi	r26, 0x31	; 49
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e1 e3       	ldi	r30, 0x31	; 49
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 2e       	mov	r0, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Dio_SetPinDirection+0x208>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <Dio_SetPinDirection+0x204>
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	8c 93       	st	X, r24
		else
		{
			//wrong Direction do noting
		}
	}
}
 27e:	29 96       	adiw	r28, 0x09	; 9
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

00000290 <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	29 97       	sbiw	r28, 0x09	; 9
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	6a 83       	std	Y+2, r22	; 0x02
 2a8:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) & (PinNo<=PIN7))
 2aa:	19 86       	std	Y+9, r1	; 0x09
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	84 30       	cpi	r24, 0x04	; 4
 2b0:	10 f4       	brcc	.+4      	; 0x2b6 <Dio_SetPinValue+0x26>
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	29 87       	std	Y+9, r18	; 0x09
 2b6:	18 86       	std	Y+8, r1	; 0x08
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	10 f4       	brcc	.+4      	; 0x2c2 <Dio_SetPinValue+0x32>
 2be:	31 e0       	ldi	r19, 0x01	; 1
 2c0:	38 87       	std	Y+8, r19	; 0x08
 2c2:	89 85       	ldd	r24, Y+9	; 0x09
 2c4:	98 85       	ldd	r25, Y+8	; 0x08
 2c6:	89 23       	and	r24, r25
 2c8:	88 23       	and	r24, r24
 2ca:	09 f4       	brne	.+2      	; 0x2ce <Dio_SetPinValue+0x3e>
 2cc:	ea c0       	rjmp	.+468    	; 0x4a2 <Dio_SetPinValue+0x212>
		{
			if(Value==LOW)
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	88 23       	and	r24, r24
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <Dio_SetPinValue+0x46>
 2d4:	74 c0       	rjmp	.+232    	; 0x3be <Dio_SetPinValue+0x12e>
			{
				switch(GroupNo)
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	3f 83       	std	Y+7, r19	; 0x07
 2de:	2e 83       	std	Y+6, r18	; 0x06
 2e0:	8e 81       	ldd	r24, Y+6	; 0x06
 2e2:	9f 81       	ldd	r25, Y+7	; 0x07
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	91 05       	cpc	r25, r1
 2e8:	59 f1       	breq	.+86     	; 0x340 <Dio_SetPinValue+0xb0>
 2ea:	2e 81       	ldd	r18, Y+6	; 0x06
 2ec:	3f 81       	ldd	r19, Y+7	; 0x07
 2ee:	22 30       	cpi	r18, 0x02	; 2
 2f0:	31 05       	cpc	r19, r1
 2f2:	2c f4       	brge	.+10     	; 0x2fe <Dio_SetPinValue+0x6e>
 2f4:	8e 81       	ldd	r24, Y+6	; 0x06
 2f6:	9f 81       	ldd	r25, Y+7	; 0x07
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	69 f0       	breq	.+26     	; 0x316 <Dio_SetPinValue+0x86>
 2fc:	d2 c0       	rjmp	.+420    	; 0x4a2 <Dio_SetPinValue+0x212>
 2fe:	2e 81       	ldd	r18, Y+6	; 0x06
 300:	3f 81       	ldd	r19, Y+7	; 0x07
 302:	22 30       	cpi	r18, 0x02	; 2
 304:	31 05       	cpc	r19, r1
 306:	89 f1       	breq	.+98     	; 0x36a <Dio_SetPinValue+0xda>
 308:	8e 81       	ldd	r24, Y+6	; 0x06
 30a:	9f 81       	ldd	r25, Y+7	; 0x07
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	91 05       	cpc	r25, r1
 310:	09 f4       	brne	.+2      	; 0x314 <Dio_SetPinValue+0x84>
 312:	40 c0       	rjmp	.+128    	; 0x394 <Dio_SetPinValue+0x104>
 314:	c6 c0       	rjmp	.+396    	; 0x4a2 <Dio_SetPinValue+0x212>
				{
				case GroupA: CLR_BIT(PORTA, PinNo); break;
 316:	ab e3       	ldi	r26, 0x3B	; 59
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	eb e3       	ldi	r30, 0x3B	; 59
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	48 2f       	mov	r20, r24
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <Dio_SetPinValue+0xa4>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <Dio_SetPinValue+0xa0>
 338:	80 95       	com	r24
 33a:	84 23       	and	r24, r20
 33c:	8c 93       	st	X, r24
 33e:	b1 c0       	rjmp	.+354    	; 0x4a2 <Dio_SetPinValue+0x212>
				case GroupB: CLR_BIT(PORTB, PinNo); break;
 340:	a8 e3       	ldi	r26, 0x38	; 56
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e8 e3       	ldi	r30, 0x38	; 56
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <Dio_SetPinValue+0xce>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <Dio_SetPinValue+0xca>
 362:	80 95       	com	r24
 364:	84 23       	and	r24, r20
 366:	8c 93       	st	X, r24
 368:	9c c0       	rjmp	.+312    	; 0x4a2 <Dio_SetPinValue+0x212>
				case GroupC: CLR_BIT(PORTC, PinNo); break;
 36a:	a5 e3       	ldi	r26, 0x35	; 53
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	e5 e3       	ldi	r30, 0x35	; 53
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 2e       	mov	r0, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <Dio_SetPinValue+0xf8>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <Dio_SetPinValue+0xf4>
 38c:	80 95       	com	r24
 38e:	84 23       	and	r24, r20
 390:	8c 93       	st	X, r24
 392:	87 c0       	rjmp	.+270    	; 0x4a2 <Dio_SetPinValue+0x212>
				case GroupD: CLR_BIT(PORTD, PinNo); break;
 394:	a2 e3       	ldi	r26, 0x32	; 50
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	e2 e3       	ldi	r30, 0x32	; 50
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	48 2f       	mov	r20, r24
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 2e       	mov	r0, r18
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <Dio_SetPinValue+0x122>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <Dio_SetPinValue+0x11e>
 3b6:	80 95       	com	r24
 3b8:	84 23       	and	r24, r20
 3ba:	8c 93       	st	X, r24
 3bc:	72 c0       	rjmp	.+228    	; 0x4a2 <Dio_SetPinValue+0x212>
				}
			}
			else if(Value==HIGH)
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <Dio_SetPinValue+0x136>
 3c4:	6e c0       	rjmp	.+220    	; 0x4a2 <Dio_SetPinValue+0x212>
			{
				switch(GroupNo)
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	28 2f       	mov	r18, r24
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	3d 83       	std	Y+5, r19	; 0x05
 3ce:	2c 83       	std	Y+4, r18	; 0x04
 3d0:	8c 81       	ldd	r24, Y+4	; 0x04
 3d2:	9d 81       	ldd	r25, Y+5	; 0x05
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	91 05       	cpc	r25, r1
 3d8:	49 f1       	breq	.+82     	; 0x42c <Dio_SetPinValue+0x19c>
 3da:	2c 81       	ldd	r18, Y+4	; 0x04
 3dc:	3d 81       	ldd	r19, Y+5	; 0x05
 3de:	22 30       	cpi	r18, 0x02	; 2
 3e0:	31 05       	cpc	r19, r1
 3e2:	2c f4       	brge	.+10     	; 0x3ee <Dio_SetPinValue+0x15e>
 3e4:	8c 81       	ldd	r24, Y+4	; 0x04
 3e6:	9d 81       	ldd	r25, Y+5	; 0x05
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	61 f0       	breq	.+24     	; 0x404 <Dio_SetPinValue+0x174>
 3ec:	5a c0       	rjmp	.+180    	; 0x4a2 <Dio_SetPinValue+0x212>
 3ee:	2c 81       	ldd	r18, Y+4	; 0x04
 3f0:	3d 81       	ldd	r19, Y+5	; 0x05
 3f2:	22 30       	cpi	r18, 0x02	; 2
 3f4:	31 05       	cpc	r19, r1
 3f6:	71 f1       	breq	.+92     	; 0x454 <Dio_SetPinValue+0x1c4>
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	9d 81       	ldd	r25, Y+5	; 0x05
 3fc:	83 30       	cpi	r24, 0x03	; 3
 3fe:	91 05       	cpc	r25, r1
 400:	e9 f1       	breq	.+122    	; 0x47c <Dio_SetPinValue+0x1ec>
 402:	4f c0       	rjmp	.+158    	; 0x4a2 <Dio_SetPinValue+0x212>
				{
				case GroupA: SET_BIT(PORTA, PinNo); break;
 404:	ab e3       	ldi	r26, 0x3B	; 59
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	eb e3       	ldi	r30, 0x3B	; 59
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <Dio_SetPinValue+0x192>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <Dio_SetPinValue+0x18e>
 426:	84 2b       	or	r24, r20
 428:	8c 93       	st	X, r24
 42a:	3b c0       	rjmp	.+118    	; 0x4a2 <Dio_SetPinValue+0x212>
				case GroupB: SET_BIT(PORTB, PinNo); break;
 42c:	a8 e3       	ldi	r26, 0x38	; 56
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e8 e3       	ldi	r30, 0x38	; 56
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <Dio_SetPinValue+0x1ba>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <Dio_SetPinValue+0x1b6>
 44e:	84 2b       	or	r24, r20
 450:	8c 93       	st	X, r24
 452:	27 c0       	rjmp	.+78     	; 0x4a2 <Dio_SetPinValue+0x212>
				case GroupC: SET_BIT(PORTC, PinNo); break;
 454:	a5 e3       	ldi	r26, 0x35	; 53
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	e5 e3       	ldi	r30, 0x35	; 53
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	48 2f       	mov	r20, r24
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	28 2f       	mov	r18, r24
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 2e       	mov	r0, r18
 46c:	02 c0       	rjmp	.+4      	; 0x472 <Dio_SetPinValue+0x1e2>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	0a 94       	dec	r0
 474:	e2 f7       	brpl	.-8      	; 0x46e <Dio_SetPinValue+0x1de>
 476:	84 2b       	or	r24, r20
 478:	8c 93       	st	X, r24
 47a:	13 c0       	rjmp	.+38     	; 0x4a2 <Dio_SetPinValue+0x212>
				case GroupD: SET_BIT(PORTD, PinNo); break;
 47c:	a2 e3       	ldi	r26, 0x32	; 50
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	e2 e3       	ldi	r30, 0x32	; 50
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	48 2f       	mov	r20, r24
 488:	8a 81       	ldd	r24, Y+2	; 0x02
 48a:	28 2f       	mov	r18, r24
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 2e       	mov	r0, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <Dio_SetPinValue+0x20a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	0a 94       	dec	r0
 49c:	e2 f7       	brpl	.-8      	; 0x496 <Dio_SetPinValue+0x206>
 49e:	84 2b       	or	r24, r20
 4a0:	8c 93       	st	X, r24
			else
			{
				//wrong Direction do noting
			}
		}
}
 4a2:	29 96       	adiw	r28, 0x09	; 9
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	08 95       	ret

000004b4 <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)

{
 4b4:	df 93       	push	r29
 4b6:	cf 93       	push	r28
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	27 97       	sbiw	r28, 0x07	; 7
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	8a 83       	std	Y+2, r24	; 0x02
 4ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Ret_PinValue=0;
 4cc:	19 82       	std	Y+1, r1	; 0x01

	if((GroupNo<=GroupD) & (PinNo<=PIN7))
 4ce:	1f 82       	std	Y+7, r1	; 0x07
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	84 30       	cpi	r24, 0x04	; 4
 4d4:	10 f4       	brcc	.+4      	; 0x4da <Dio_GetPinValue+0x26>
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	2f 83       	std	Y+7, r18	; 0x07
 4da:	1e 82       	std	Y+6, r1	; 0x06
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	88 30       	cpi	r24, 0x08	; 8
 4e0:	10 f4       	brcc	.+4      	; 0x4e6 <Dio_GetPinValue+0x32>
 4e2:	31 e0       	ldi	r19, 0x01	; 1
 4e4:	3e 83       	std	Y+6, r19	; 0x06
 4e6:	8f 81       	ldd	r24, Y+7	; 0x07
 4e8:	4e 81       	ldd	r20, Y+6	; 0x06
 4ea:	84 23       	and	r24, r20
 4ec:	88 23       	and	r24, r24
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <Dio_GetPinValue+0x3e>
 4f0:	68 c0       	rjmp	.+208    	; 0x5c2 <Dio_GetPinValue+0x10e>
	{
		switch(GroupNo)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	3d 83       	std	Y+5, r19	; 0x05
 4fa:	2c 83       	std	Y+4, r18	; 0x04
 4fc:	4c 81       	ldd	r20, Y+4	; 0x04
 4fe:	5d 81       	ldd	r21, Y+5	; 0x05
 500:	41 30       	cpi	r20, 0x01	; 1
 502:	51 05       	cpc	r21, r1
 504:	41 f1       	breq	.+80     	; 0x556 <Dio_GetPinValue+0xa2>
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	9d 81       	ldd	r25, Y+5	; 0x05
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	91 05       	cpc	r25, r1
 50e:	34 f4       	brge	.+12     	; 0x51c <Dio_GetPinValue+0x68>
 510:	2c 81       	ldd	r18, Y+4	; 0x04
 512:	3d 81       	ldd	r19, Y+5	; 0x05
 514:	21 15       	cp	r18, r1
 516:	31 05       	cpc	r19, r1
 518:	61 f0       	breq	.+24     	; 0x532 <Dio_GetPinValue+0x7e>
 51a:	55 c0       	rjmp	.+170    	; 0x5c6 <Dio_GetPinValue+0x112>
 51c:	4c 81       	ldd	r20, Y+4	; 0x04
 51e:	5d 81       	ldd	r21, Y+5	; 0x05
 520:	42 30       	cpi	r20, 0x02	; 2
 522:	51 05       	cpc	r21, r1
 524:	51 f1       	breq	.+84     	; 0x57a <Dio_GetPinValue+0xc6>
 526:	8c 81       	ldd	r24, Y+4	; 0x04
 528:	9d 81       	ldd	r25, Y+5	; 0x05
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	91 05       	cpc	r25, r1
 52e:	b9 f1       	breq	.+110    	; 0x59e <Dio_GetPinValue+0xea>
 530:	4a c0       	rjmp	.+148    	; 0x5c6 <Dio_GetPinValue+0x112>
		{
		case GroupA: Ret_PinValue=GET_BIT(PINA, PinNo); break;
 532:	e9 e3       	ldi	r30, 0x39	; 57
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	88 2f       	mov	r24, r24
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	a9 01       	movw	r20, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <Dio_GetPinValue+0x96>
 546:	55 95       	asr	r21
 548:	47 95       	ror	r20
 54a:	8a 95       	dec	r24
 54c:	e2 f7       	brpl	.-8      	; 0x546 <Dio_GetPinValue+0x92>
 54e:	ca 01       	movw	r24, r20
 550:	81 70       	andi	r24, 0x01	; 1
 552:	89 83       	std	Y+1, r24	; 0x01
 554:	38 c0       	rjmp	.+112    	; 0x5c6 <Dio_GetPinValue+0x112>
		case GroupB: Ret_PinValue=GET_BIT(PINB, PinNo); break;
 556:	e6 e3       	ldi	r30, 0x36	; 54
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	88 2f       	mov	r24, r24
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	a9 01       	movw	r20, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <Dio_GetPinValue+0xba>
 56a:	55 95       	asr	r21
 56c:	47 95       	ror	r20
 56e:	8a 95       	dec	r24
 570:	e2 f7       	brpl	.-8      	; 0x56a <Dio_GetPinValue+0xb6>
 572:	ca 01       	movw	r24, r20
 574:	81 70       	andi	r24, 0x01	; 1
 576:	89 83       	std	Y+1, r24	; 0x01
 578:	26 c0       	rjmp	.+76     	; 0x5c6 <Dio_GetPinValue+0x112>
		case GroupC: Ret_PinValue=GET_BIT(PINC, PinNo); break;
 57a:	e3 e3       	ldi	r30, 0x33	; 51
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	28 2f       	mov	r18, r24
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	88 2f       	mov	r24, r24
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	a9 01       	movw	r20, r18
 58c:	02 c0       	rjmp	.+4      	; 0x592 <Dio_GetPinValue+0xde>
 58e:	55 95       	asr	r21
 590:	47 95       	ror	r20
 592:	8a 95       	dec	r24
 594:	e2 f7       	brpl	.-8      	; 0x58e <Dio_GetPinValue+0xda>
 596:	ca 01       	movw	r24, r20
 598:	81 70       	andi	r24, 0x01	; 1
 59a:	89 83       	std	Y+1, r24	; 0x01
 59c:	14 c0       	rjmp	.+40     	; 0x5c6 <Dio_GetPinValue+0x112>
		case GroupD: Ret_PinValue=GET_BIT(PIND, PinNo); break;
 59e:	e0 e3       	ldi	r30, 0x30	; 48
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	88 2f       	mov	r24, r24
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	a9 01       	movw	r20, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <Dio_GetPinValue+0x102>
 5b2:	55 95       	asr	r21
 5b4:	47 95       	ror	r20
 5b6:	8a 95       	dec	r24
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <Dio_GetPinValue+0xfe>
 5ba:	ca 01       	movw	r24, r20
 5bc:	81 70       	andi	r24, 0x01	; 1
 5be:	89 83       	std	Y+1, r24	; 0x01
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <Dio_GetPinValue+0x112>
		}
	}
	else
		Ret_PinValue=0xFF;
 5c2:	8f ef       	ldi	r24, 0xFF	; 255
 5c4:	89 83       	std	Y+1, r24	; 0x01

return Ret_PinValue;
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5c8:	27 96       	adiw	r28, 0x07	; 7
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	cf 91       	pop	r28
 5d6:	df 91       	pop	r29
 5d8:	08 95       	ret

000005da <Dio_SetPortValue>:
void Dio_SetPortValue(u8 GroupNo, u8 PortValue)
{
 5da:	df 93       	push	r29
 5dc:	cf 93       	push	r28
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <Dio_SetPortValue+0x6>
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <Dio_SetPortValue+0x8>
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	89 83       	std	Y+1, r24	; 0x01
 5e8:	6a 83       	std	Y+2, r22	; 0x02
	if(GroupNo<=GroupD)
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	84 30       	cpi	r24, 0x04	; 4
 5ee:	90 f5       	brcc	.+100    	; 0x654 <Dio_SetPortValue+0x7a>
		{
			switch(GroupNo)
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	3c 83       	std	Y+4, r19	; 0x04
 5f8:	2b 83       	std	Y+3, r18	; 0x03
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	9c 81       	ldd	r25, Y+4	; 0x04
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	91 05       	cpc	r25, r1
 602:	d1 f0       	breq	.+52     	; 0x638 <Dio_SetPortValue+0x5e>
 604:	2b 81       	ldd	r18, Y+3	; 0x03
 606:	3c 81       	ldd	r19, Y+4	; 0x04
 608:	22 30       	cpi	r18, 0x02	; 2
 60a:	31 05       	cpc	r19, r1
 60c:	2c f4       	brge	.+10     	; 0x618 <Dio_SetPortValue+0x3e>
 60e:	8b 81       	ldd	r24, Y+3	; 0x03
 610:	9c 81       	ldd	r25, Y+4	; 0x04
 612:	00 97       	sbiw	r24, 0x00	; 0
 614:	61 f0       	breq	.+24     	; 0x62e <Dio_SetPortValue+0x54>
 616:	1e c0       	rjmp	.+60     	; 0x654 <Dio_SetPortValue+0x7a>
 618:	2b 81       	ldd	r18, Y+3	; 0x03
 61a:	3c 81       	ldd	r19, Y+4	; 0x04
 61c:	22 30       	cpi	r18, 0x02	; 2
 61e:	31 05       	cpc	r19, r1
 620:	81 f0       	breq	.+32     	; 0x642 <Dio_SetPortValue+0x68>
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	9c 81       	ldd	r25, Y+4	; 0x04
 626:	83 30       	cpi	r24, 0x03	; 3
 628:	91 05       	cpc	r25, r1
 62a:	81 f0       	breq	.+32     	; 0x64c <Dio_SetPortValue+0x72>
 62c:	13 c0       	rjmp	.+38     	; 0x654 <Dio_SetPortValue+0x7a>
			{
			case GroupA: PORTA = PortValue; break;
 62e:	eb e3       	ldi	r30, 0x3B	; 59
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	8a 81       	ldd	r24, Y+2	; 0x02
 634:	80 83       	st	Z, r24
 636:	0e c0       	rjmp	.+28     	; 0x654 <Dio_SetPortValue+0x7a>
			case GroupB: PORTB = PortValue; break;
 638:	e8 e3       	ldi	r30, 0x38	; 56
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	8a 81       	ldd	r24, Y+2	; 0x02
 63e:	80 83       	st	Z, r24
 640:	09 c0       	rjmp	.+18     	; 0x654 <Dio_SetPortValue+0x7a>
			case GroupC: PORTC = PortValue; break;
 642:	e5 e3       	ldi	r30, 0x35	; 53
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	80 83       	st	Z, r24
 64a:	04 c0       	rjmp	.+8      	; 0x654 <Dio_SetPortValue+0x7a>
			case GroupD: PORTD = PortValue; break;
 64c:	e2 e3       	ldi	r30, 0x32	; 50
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	80 83       	st	Z, r24
			}
		}
}
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	cf 91       	pop	r28
 65e:	df 91       	pop	r29
 660:	08 95       	ret

00000662 <SPI_InitMaster>:
#include "Dio_Int.h"
#include "Utilities.h"
#include "Dio_Reg.h"
#include "SPI.h"
void SPI_InitMaster(void)
{
 662:	df 93       	push	r29
 664:	cf 93       	push	r28
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
	// configure SPI pins
	Dio_SetPinDirection(GroupB,PIN4,OUTPUT); //SS
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	64 e0       	ldi	r22, 0x04	; 4
 66e:	41 e0       	ldi	r20, 0x01	; 1
 670:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN5,OUTPUT); //MOSI
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	65 e0       	ldi	r22, 0x05	; 5
 678:	41 e0       	ldi	r20, 0x01	; 1
 67a:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN6,INPUT); //MISO
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	66 e0       	ldi	r22, 0x06	; 6
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN7,OUTPUT); //SCK
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	67 e0       	ldi	r22, 0x07	; 7
 68c:	41 e0       	ldi	r20, 0x01	; 1
 68e:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	//Master mode
	SET_BIT(SPCR,4);
 692:	ad e2       	ldi	r26, 0x2D	; 45
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	ed e2       	ldi	r30, 0x2D	; 45
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	80 61       	ori	r24, 0x10	; 16
 69e:	8c 93       	st	X, r24
	//Enable SPI
	SET_BIT(SPCR,6);
 6a0:	ad e2       	ldi	r26, 0x2D	; 45
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	ed e2       	ldi	r30, 0x2D	; 45
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	80 64       	ori	r24, 0x40	; 64
 6ac:	8c 93       	st	X, r24

	//clock rate to fso/4 : clr bits 0,1 (no need to do it)

}
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	08 95       	ret

000006b4 <SPI_InitSlave>:
void SPI_InitSlave(void)
{
 6b4:	df 93       	push	r29
 6b6:	cf 93       	push	r28
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
	// configure SPI pins
	Dio_SetPinDirection(GroupB,PIN4,INPUT); //SS
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	64 e0       	ldi	r22, 0x04	; 4
 6c0:	40 e0       	ldi	r20, 0x00	; 0
 6c2:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN5,INPUT); //MOSI
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	65 e0       	ldi	r22, 0x05	; 5
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN6,OUTPUT); //MISO
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	66 e0       	ldi	r22, 0x06	; 6
 6d4:	41 e0       	ldi	r20, 0x01	; 1
 6d6:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN7,INPUT); //SCK
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	67 e0       	ldi	r22, 0x07	; 7
 6de:	40 e0       	ldi	r20, 0x00	; 0
 6e0:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	//Enable SPI
	SET_BIT(SPCR,6);
 6e4:	ad e2       	ldi	r26, 0x2D	; 45
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	ed e2       	ldi	r30, 0x2D	; 45
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	80 64       	ori	r24, 0x40	; 64
 6f0:	8c 93       	st	X, r24
	//clock rate to fso/4 : clr bits 0,1 (no need to do it)
}
 6f2:	cf 91       	pop	r28
 6f4:	df 91       	pop	r29
 6f6:	08 95       	ret

000006f8 <SPI_SendByte>:
void SPI_SendByte(u8 data)
{
 6f8:	df 93       	push	r29
 6fa:	cf 93       	push	r28
 6fc:	0f 92       	push	r0
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	89 83       	std	Y+1, r24	; 0x01
	SPDR =data;
 704:	ef e2       	ldi	r30, 0x2F	; 47
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,7)==0);
 70c:	ee e2       	ldi	r30, 0x2E	; 46
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	88 23       	and	r24, r24
 714:	dc f7       	brge	.-10     	; 0x70c <SPI_SendByte+0x14>
}
 716:	0f 90       	pop	r0
 718:	cf 91       	pop	r28
 71a:	df 91       	pop	r29
 71c:	08 95       	ret

0000071e <SPI_RecieveByte>:
u8 SPI_RecieveByte(void)
{
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,7)==0);
 726:	ee e2       	ldi	r30, 0x2E	; 46
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	88 23       	and	r24, r24
 72e:	dc f7       	brge	.-10     	; 0x726 <SPI_RecieveByte+0x8>
	return SPDR;
 730:	ef e2       	ldi	r30, 0x2F	; 47
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
}
 736:	cf 91       	pop	r28
 738:	df 91       	pop	r29
 73a:	08 95       	ret

0000073c <main>:
#include "Dio_Reg.h"
#include "Utilities.h"
#include "SPI.h"
void main(void)
{
 73c:	df 93       	push	r29
 73e:	cf 93       	push	r28
 740:	0f 92       	push	r0
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
	SPI_InitSlave();
 746:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <SPI_InitSlave>
	u8 True ='T';
 74a:	84 e5       	ldi	r24, 0x54	; 84
 74c:	89 83       	std	Y+1, r24	; 0x01
	Dio_SetPinDirection(GroupA,PIN0,OUTPUT);
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	while(1)
	{
		if(SPI_RecieveByte() == True)
 758:	0e 94 8f 03 	call	0x71e	; 0x71e <SPI_RecieveByte>
 75c:	98 2f       	mov	r25, r24
 75e:	89 81       	ldd	r24, Y+1	; 0x01
 760:	98 17       	cp	r25, r24
 762:	31 f4       	brne	.+12     	; 0x770 <main+0x34>
		{
		Dio_SetPinValue(GroupA,PIN0,HIGH);
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	0e 94 48 01 	call	0x290	; 0x290 <Dio_SetPinValue>
 76e:	f4 cf       	rjmp	.-24     	; 0x758 <main+0x1c>
		}else{
		Dio_SetPinValue(GroupA,PIN0,LOW);
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	40 e0       	ldi	r20, 0x00	; 0
 776:	0e 94 48 01 	call	0x290	; 0x290 <Dio_SetPinValue>
 77a:	ee cf       	rjmp	.-36     	; 0x758 <main+0x1c>

0000077c <_exit>:
 77c:	f8 94       	cli

0000077e <__stop_program>:
 77e:	ff cf       	rjmp	.-2      	; 0x77e <__stop_program>
